
  <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>Next.js Starter Blog</title>
      <link>https://tailwind-nextjs-starter-blog.vercel.app/blog</link>
      <description>A blog created with Next.js and Tailwind.css</description>
      <language>en-us</language>
      <managingEditor>george@barbu.cc (George Barbu)</managingEditor>
      <webMaster>george@barbu.cc (George Barbu)</webMaster>
      <lastBuildDate>Fri, 01 Jul 2022 13:06:38 GMT</lastBuildDate>
      <atom:link href="https://tailwind-nextjs-starter-blog.vercel.app/feed.xml" rel="self" type="application/rss+xml"/>
      
  <item>
    <guid>https://tailwind-nextjs-starter-blog.vercel.app/blog/markdown-guide</guid>
    <title>undefined</title>
    <link>https://tailwind-nextjs-starter-blog.vercel.app/blog/markdown-guide</link>
    <preview>Markdown cheatsheet for all your blogging needs - headers, lists, images, tables and more! An illustrated guide based on GitHub Flavored Markdown.</preview>
    <content>
# Introduction

Markdown and Mdx parsing is supported via `unified`, and other remark and rehype packages. `next-mdx-remote` allows us to parse `.mdx` and `.md` files in a more flexible manner without touching webpack.

GitHub flavored markdown is used. `mdx-prism` provides syntax highlighting capabilities for code blocks. Here's a demo of how everything looks.

The following markdown cheatsheet is adapted from: https://guides.github.com/features/mastering-markdown/

# What is Markdown?

Markdown is a way to style text on the web. You control the display of the document; formatting words as bold or italic, adding images, and creating lists are just a few of the things we can do with Markdown. Mostly, Markdown is just regular text with a few non-alphabetic characters thrown in, like `#` or `*`.

# Syntax guide

Here’s an overview of Markdown syntax that you can use anywhere on GitHub.com or in your own text files.

## Headers

```
# This is a h1 tag

## This is a h2 tag

#### This is a h4 tag
```

# This is a h1 tag

## This is a h2 tag

#### This is a h4 tag

## Emphasis

```
_This text will be italic_

**This text will be bold**

_You **can** combine them_
```

_This text will be italic_

**This text will be bold**

_You **can** combine them_

## Lists

### Unordered

```
- Item 1
- Item 2
  - Item 2a
  - Item 2b
```

- Item 1
- Item 2
  - Item 2a
  - Item 2b

### Ordered

```
1. Item 1
1. Item 2
1. Item 3
   1. Item 3a
   1. Item 3b
```

1. Item 1
1. Item 2
1. Item 3
   1. Item 3a
   1. Item 3b

## Images

```
![GitHub Logo](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png)
Format: ![Alt Text](url)
```

![GitHub Logo](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png)

## Links

```
http://github.com - automatic!
[GitHub](http://github.com)
```

http://github.com - automatic!
[GitHub](http://github.com)

## Blockquotes

```
As Kanye West said:

> We're living the future so
> the present is our past.
```

As Kanye West said:

> We're living the future so
> the present is our past.

## Inline code

```
I think you should use an
`<addr>` element here instead.
```

I think you should use an
`<addr>` element here instead.

## Syntax highlighting

Here’s an example of how you can use syntax highlighting with [GitHub Flavored Markdown](https://help.github.com/articles/basic-writing-and-formatting-syntax/):

````
```js:fancyAlert.js
function fancyAlert(arg) {
  if (arg) {
    $.facebox({ div: '#foo' })
  }
}
```
````

And here's how it looks - nicely colored with styled code titles!

```js:fancyAlert.js
function fancyAlert(arg) {
  if (arg) {
    $.facebox({ div: '#foo' })
  }
}
```

## Footnotes

```
Here is a simple footnote[^1]. With some additional text after it.

[^1]: My reference.
```

Here is a simple footnote[^1]. With some additional text after it.

[^1]: My reference.

## Task Lists

```
- [x] list syntax required (any unordered or ordered list supported)
- [x] this is a complete item
- [ ] this is an incomplete item
```

- [x] list syntax required (any unordered or ordered list supported)
- [x] this is a complete item
- [ ] this is an incomplete item

## Tables

You can create tables by assembling a list of words and dividing them with hyphens `-` (for the first row), and then separating each column with a pipe `|`:

```
| First Header                | Second Header                |
| --------------------------- | ---------------------------- |
| Content from cell 1         | Content from cell 2          |
| Content in the first column | Content in the second column |
```

| First Header                | Second Header                |
| --------------------------- | ---------------------------- |
| Content from cell 1         | Content from cell 2          |
| Content in the first column | Content in the second column |

## Strikethrough

Any word wrapped with two tildes (like `~~this~~`) will appear ~~crossed out~~.</content>
    <pubDate>Fri, 01 Jul 2022 13:06:38 GMT</pubDate>
    <author>george@barbu.cc (George Barbu)</author>
    undefined
  </item>

  <item>
    <guid>https://tailwind-nextjs-starter-blog.vercel.app/blog/pathfinding-in-rust-a-tutorial-with-examples</guid>
    <title>undefined</title>
    <link>https://tailwind-nextjs-starter-blog.vercel.app/blog/pathfinding-in-rust-a-tutorial-with-examples</link>
    <preview>Let's take a look at some options for pathfinding in Rust using breadth-first search, Dijkstra's algorithm, and the A* search algorithm.
The post Pathfinding in Rust: A tutorial with examples appeared first on LogRocket Blog.</preview>
    <content><p>Let's take a look at some options for pathfinding in Rust using breadth-first search, Dijkstra's algorithm, and the A* search algorithm.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/pathfinding-rust-tutorial-examples/">Pathfinding in Rust: A tutorial with examples</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
</content>
    <pubDate>Sat, 02 Jul 2022 09:07:41 GMT</pubDate>
    <author>george@barbu.cc (George Barbu)</author>
    undefined
  </item>

  <item>
    <guid>https://tailwind-nextjs-starter-blog.vercel.app/blog/pathfinding-in-rust-a-tutorial-with-examples2</guid>
    <title>undefined</title>
    <link>https://tailwind-nextjs-starter-blog.vercel.app/blog/pathfinding-in-rust-a-tutorial-with-examples2</link>
    <preview>Let's take a look at some options for pathfinding in Rust using breadth-first search, Dijkstra's algorithm, and the A* search algorithm.
The post Pathfinding in Rust: A tutorial with examples appeared first on LogRocket Blog.</preview>
    <content><p>Let's take a look at some options for pathfinding in Rust using breadth-first search, Dijkstra's algorithm, and the A* search algorithm.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/pathfinding-rust-tutorial-examples/">Pathfinding in Rust: A tutorial with examples</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
</content>
    <pubDate>Sat, 02 Jul 2022 09:17:15 GMT</pubDate>
    <author>george@barbu.cc (George Barbu)</author>
    undefined
  </item>

  <item>
    <guid>https://tailwind-nextjs-starter-blog.vercel.app/blog/pathfinding-in-rust-a-tutorial-with-examples23</guid>
    <title>undefined</title>
    <link>https://tailwind-nextjs-starter-blog.vercel.app/blog/pathfinding-in-rust-a-tutorial-with-examples23</link>
    <preview>Let's take a look at some options for pathfinding in Rust using breadth-first search, Dijkstra's algorithm, and the A* search algorithm.
The post Pathfinding in Rust: A tutorial with examples appeared first on LogRocket Blog.</preview>
    <content><p>Let's take a look at some options for pathfinding in Rust using breadth-first search, Dijkstra's algorithm, and the A* search algorithm.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/pathfinding-rust-tutorial-examples/">Pathfinding in Rust: A tutorial with examples</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
</content>
    <pubDate>Sat, 02 Jul 2022 09:17:23 GMT</pubDate>
    <author>george@barbu.cc (George Barbu)</author>
    undefined
  </item>

  <item>
    <guid>https://tailwind-nextjs-starter-blog.vercel.app/blog/pathfinding-in-rust-a-tutorial-with-examples234</guid>
    <title>undefined</title>
    <link>https://tailwind-nextjs-starter-blog.vercel.app/blog/pathfinding-in-rust-a-tutorial-with-examples234</link>
    <preview>Let's take a look at some options for pathfinding in Rust using breadth-first search, Dijkstra's algorithm, and the A* search algorithm.
The post Pathfinding in Rust: A tutorial with examples appeared first on LogRocket Blog.</preview>
    <content><p>Let's take a look at some options for pathfinding in Rust using breadth-first search, Dijkstra's algorithm, and the A* search algorithm.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/pathfinding-rust-tutorial-examples/">Pathfinding in Rust: A tutorial with examples</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
</content>
    <pubDate>Sat, 02 Jul 2022 09:17:31 GMT</pubDate>
    <author>george@barbu.cc (George Barbu)</author>
    undefined
  </item>

  <item>
    <guid>https://tailwind-nextjs-starter-blog.vercel.app/blog/handling-user-authentication-with-remix</guid>
    <title>undefined</title>
    <link>https://tailwind-nextjs-starter-blog.vercel.app/blog/handling-user-authentication-with-remix</link>
    <preview>Learn how to implement authentication on Remix apps and build a fullstack quote wall application with support for user authentication.
The post Handling user authentication with Remix appeared first on LogRocket Blog.</preview>
    <content><p>Learn how to implement authentication on Remix apps and build a fullstack quote wall application with support for user authentication.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/handling-user-authentication-remix/">Handling user authentication with Remix</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
</content>
    <pubDate>Sat, 02 Jul 2022 09:07:32 GMT</pubDate>
    <author>george@barbu.cc (George Barbu)</author>
    undefined
  </item>

  <item>
    <guid>https://tailwind-nextjs-starter-blog.vercel.app/blog/using-barrel-exports-to-organize-react-components</guid>
    <title>undefined</title>
    <link>https://tailwind-nextjs-starter-blog.vercel.app/blog/using-barrel-exports-to-organize-react-components</link>
    <preview>Here, we introduce the concept of barrel exports in React and discuss how to use barrel exports to save development time.
The post Using barrel exports to organize React components appeared first on LogRocket Blog.</preview>
    <content><p>Here, we introduce the concept of barrel exports in React and discuss how to use barrel exports to save development time.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/using-barrel-exports-organize-react-components/">Using barrel exports to organize React components</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
</content>
    <pubDate>Fri, 01 Jul 2022 18:12:09 GMT</pubDate>
    <author>george@barbu.cc (George Barbu)</author>
    undefined
  </item>

  <item>
    <guid>https://tailwind-nextjs-starter-blog.vercel.app/blog/how-to-build-a-notes-app-with-react-and-local-storage</guid>
    <title>undefined</title>
    <link>https://tailwind-nextjs-starter-blog.vercel.app/blog/how-to-build-a-notes-app-with-react-and-local-storage</link>
    <preview>We can use localStorage to persist our React app to the browser so we don't lose our data when we close the app. 
The post How to build a notes app with React and <code>localStorage</code> appeared first on LogRocket Blog.</preview>
    <content><p>We can use localStorage to persist our React app to the browser so we don't lose our data when we close the app. </p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/notes-app-react-localstorage/">How to build a notes app with React and &lt;code&gt;localStorage&lt;/code&gt;</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
</content>
    <pubDate>Fri, 01 Jul 2022 18:12:13 GMT</pubDate>
    <author>george@barbu.cc (George Barbu)</author>
    undefined
  </item>

  <item>
    <guid>https://tailwind-nextjs-starter-blog.vercel.app/blog/fast-prototyping-in-unity-scriptable-objects</guid>
    <title>undefined</title>
    <link>https://tailwind-nextjs-starter-blog.vercel.app/blog/fast-prototyping-in-unity-scriptable-objects</link>
    <preview>In this article, we're going to be exploring fast prototyping in Unity and how you can use scriptable objects effectively in your game development.
The post Fast prototyping in Unity: Scriptable objects appeared first on LogRocket Blog.</preview>
    <content><p>In this article, we're going to be exploring fast prototyping in Unity and how you can use scriptable objects effectively in your game development.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/fast-prototyping-unity-scriptable-objects/">Fast prototyping in Unity: Scriptable objects</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
</content>
    <pubDate>Fri, 01 Jul 2022 10:09:58 GMT</pubDate>
    <author>george@barbu.cc (George Barbu)</author>
    undefined
  </item>

    </channel>
  </rss>
